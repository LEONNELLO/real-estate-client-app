package MyApp;

import javax.swing.table.*;

import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List; 

import javax.swing.*;    

import MyLibs.*;
import static MyLibs.Block.allLots;
import MyLibs.Search.*;
import com.formdev.flatlaf.FlatLightLaf;
import java.io.IOException;
import java.lang.ClassNotFoundException;
import java.util.HashSet;
import java.util.Set;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Jack
 */
public class MainFrame extends javax.swing.JFrame {
        Block[] blocks = {  new Block("Block 1", 1),
                            new Block("Block 2", 2),
                            new Block("Block 3", 3),
                            new Block("Block 4", 4),
                            new Block("Block 5", 5)};
                            
        boolean contFlag = true;
        String[] blockList = {"Block 1", "Block 2", "Block 3", "Block 4", "Block 5"};
        StatusFactory statusFactory = new StatusFactory();
        DataIO blocksData = new DataIO();
        JFrame loginFrame;
        Account account;
        ImageIcon img = new ImageIcon("src/img/logo.png");
    /**
     * Creates new form MainFrame
     */
    public MainFrame(JFrame frame, Account acc) {
        loginFrame = frame;
        setTitle("Real-Estate Sales and Management System");
        setIconImage(img.getImage());
        getContentPane().setBackground(new Color(38, 153, 243));
        setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);                       
        initComponents();
        userLabel.setText(acc.getUsername());
        LotTable.setAutoCreateRowSorter(true);
        ReportTable.setAutoCreateRowSorter(true);
        //right-align some columns
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment( JLabel.RIGHT );
        LotTable.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        LotTable.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        ReportTable.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        ReportTable.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        resultCountLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statusSearchGroup = new javax.swing.ButtonGroup();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        ManagementTablePane = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        LotTable = new javax.swing.JTable();
        ReserveButton = new javax.swing.JButton();
        SoldButton = new javax.swing.JButton();
        ForSaleButton = new javax.swing.JButton();
        MainManagementPane = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        logoutPanel = new javax.swing.JPanel();
        logoutButton = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        userImg = new javax.swing.JLabel();
        userLabel = new javax.swing.JLabel();
        AddLotButton = new javax.swing.JButton();
        EditLotButton = new javax.swing.JButton();
        DeleteLotButton = new javax.swing.JButton();
        tableRefreshButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        maxPriceField = new javax.swing.JTextField();
        minPriceField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        maxSizeField = new javax.swing.JTextField();
        minSizeField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        blockNumFieldSearch = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lotnumBox = new javax.swing.JTextField();
        tableResetButton = new javax.swing.JButton();
        LotInfoPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        lotReservedInfo = new javax.swing.JLabel();
        lotNumberInfo = new javax.swing.JLabel();
        blockNumberInfo = new javax.swing.JLabel();
        lotSizeInfo = new javax.swing.JLabel();
        lotPriceInfo = new javax.swing.JLabel();
        lotStatusInfo = new javax.swing.JLabel();
        SaleStartDateInfo = new javax.swing.JLabel();
        lotBuyerInfo = new javax.swing.JLabel();
        lotPurchaseDateInfo = new javax.swing.JLabel();
        resultCountLabel = new javax.swing.JLabel();
        ReportPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ReportTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        numBlocksReport = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        numBlocks = new javax.swing.JLabel();
        numTotalLots = new javax.swing.JLabel();
        block1Lots = new javax.swing.JLabel();
        block2Lots = new javax.swing.JLabel();
        block3Lots = new javax.swing.JLabel();
        block4Lots = new javax.swing.JLabel();
        block5Lots = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lotsSoldLabel = new javax.swing.JLabel();
        lotsForSaleLabel = new javax.swing.JLabel();
        lotsReservedLabel = new javax.swing.JLabel();
        aveLotSizeLabel = new javax.swing.JLabel();
        aveLotPriceLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(38, 154, 242));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabbedPane.setBackground(new java.awt.Color(38, 153, 243));
        tabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPaneStateChanged(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(182, 221, 251));

        ManagementTablePane.setBackground(new java.awt.Color(182, 221, 251));

        jScrollPane3.setBackground(new java.awt.Color(182, 221, 251));

        LotTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lot Number", "Block Number", "Lot Size", "Lot Price", "Lot Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        LotTable.getTableHeader().setReorderingAllowed(false);
        LotTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LotTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(LotTable);
        if (LotTable.getColumnModel().getColumnCount() > 0) {
            LotTable.getColumnModel().getColumn(0).setResizable(false);
            LotTable.getColumnModel().getColumn(1).setResizable(false);
            LotTable.getColumnModel().getColumn(2).setResizable(false);
        }

        ReserveButton.setText("Mark as Reserved");
        ReserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReserveButtonActionPerformed(evt);
            }
        });

        SoldButton.setText("Mark as Purchased");
        SoldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SoldButtonActionPerformed(evt);
            }
        });

        ForSaleButton.setText("Mark for Sale");
        ForSaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ForSaleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ManagementTablePaneLayout = new javax.swing.GroupLayout(ManagementTablePane);
        ManagementTablePane.setLayout(ManagementTablePaneLayout);
        ManagementTablePaneLayout.setHorizontalGroup(
            ManagementTablePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(ManagementTablePaneLayout.createSequentialGroup()
                .addComponent(SoldButton)
                .addGap(79, 79, 79)
                .addComponent(ReserveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addComponent(ForSaleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        ManagementTablePaneLayout.setVerticalGroup(
            ManagementTablePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManagementTablePaneLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ManagementTablePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReserveButton)
                    .addComponent(SoldButton)
                    .addComponent(ForSaleButton))
                .addContainerGap())
        );

        MainManagementPane.setBackground(new java.awt.Color(38, 154, 242));

        jPanel3.setBackground(new java.awt.Color(6, 42, 90));

        logoutPanel.setBackground(new java.awt.Color(6, 42, 90));

        logoutButton.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        logoutButton.setForeground(new java.awt.Color(199, 207, 218));
        logoutButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoutButton.setText("Log Out");
        logoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logoutButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                logoutButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                logoutButtonMouseExited(evt);
            }
        });

        javax.swing.GroupLayout logoutPanelLayout = new javax.swing.GroupLayout(logoutPanel);
        logoutPanel.setLayout(logoutPanelLayout);
        logoutPanelLayout.setHorizontalGroup(
            logoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logoutButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        logoutPanelLayout.setVerticalGroup(
            logoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logoutButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
        );

        jPanel8.setBackground(new java.awt.Color(25, 102, 161));

        userImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/34x34.png"))); // NOI18N
        userImg.setText("jLabel5");

        userLabel.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        userLabel.setForeground(new java.awt.Color(6, 42, 90));
        userLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userLabel.setText("User");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(userImg, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(userLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(userImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logoutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 360, Short.MAX_VALUE)
                .addComponent(logoutPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        AddLotButton.setBackground(new java.awt.Color(182, 221, 251));
        AddLotButton.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        AddLotButton.setText("Add Lot");
        AddLotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddLotButtonActionPerformed(evt);
            }
        });

        EditLotButton.setBackground(new java.awt.Color(182, 221, 251));
        EditLotButton.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        EditLotButton.setText("Edit Lot");
        EditLotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditLotButtonActionPerformed(evt);
            }
        });

        DeleteLotButton.setBackground(new java.awt.Color(182, 221, 251));
        DeleteLotButton.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        DeleteLotButton.setText("Delete Lot");
        DeleteLotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteLotButtonActionPerformed(evt);
            }
        });

        tableRefreshButton.setBackground(new java.awt.Color(182, 221, 251));
        tableRefreshButton.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        tableRefreshButton.setText("Refresh");
        tableRefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableRefreshButtonActionPerformed(evt);
            }
        });

        SearchButton.setBackground(new java.awt.Color(182, 221, 251));
        SearchButton.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        statusSearchGroup.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jRadioButton3.setText("For Sale");

        statusSearchGroup.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jRadioButton1.setText("Reserved");

        statusSearchGroup.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jRadioButton2.setText("Purchased");

        jLabel9.setText("-");

        jLabel6.setText("-");

        jLabel1.setBackground(new java.awt.Color(6, 42, 90));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Size (m²)");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel7.setText("Range");

        jLabel2.setBackground(new java.awt.Color(6, 42, 90));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Location (Block)");

        blockNumFieldSearch.setBackground(new java.awt.Color(182, 221, 251));
        blockNumFieldSearch.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        blockNumFieldSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Block 1", "Block 2", "Block 3", "Block 4", "Block 5", " " }));

        jLabel3.setBackground(new java.awt.Color(255, 51, 51));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(6, 42, 90));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Price (PHP)");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel8.setText("Range");

        jLabel5.setBackground(new java.awt.Color(6, 42, 90));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Lot Number");

        tableResetButton.setBackground(new java.awt.Color(182, 221, 251));
        tableResetButton.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        tableResetButton.setText("Reset");
        tableResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableResetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MainManagementPaneLayout = new javax.swing.GroupLayout(MainManagementPane);
        MainManagementPane.setLayout(MainManagementPaneLayout);
        MainManagementPaneLayout.setHorizontalGroup(
            MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainManagementPaneLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainManagementPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(MainManagementPaneLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(MainManagementPaneLayout.createSequentialGroup()
                                        .addComponent(minSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(maxSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(EditLotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(DeleteLotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(AddLotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(MainManagementPaneLayout.createSequentialGroup()
                                    .addGap(30, 30, 30)
                                    .addComponent(blockNumFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(MainManagementPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainManagementPaneLayout.createSequentialGroup()
                                .addComponent(minPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maxPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(MainManagementPaneLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(MainManagementPaneLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tableRefreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tableResetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(MainManagementPaneLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lotnumBox, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        MainManagementPaneLayout.setVerticalGroup(
            MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainManagementPaneLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(AddLotButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditLotButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteLotButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(minSizeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockNumFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(MainManagementPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(maxPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(10, 10, 10)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotnumBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SearchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableRefreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableResetButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainManagementPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );

        LotInfoPanel.setBackground(new java.awt.Color(182, 221, 251));

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel4.setText("Info");

        jPanel7.setBackground(new java.awt.Color(206, 232, 252));
        jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel7.setEnabled(false);
        jPanel7.setMaximumSize(new java.awt.Dimension(186, 202));
        jPanel7.setMinimumSize(new java.awt.Dimension(186, 202));

        lotReservedInfo.setText("Lot Reservee: ");

        lotNumberInfo.setText("Lot Number:");

        blockNumberInfo.setText("Block Number:");

        lotSizeInfo.setText("Lot Size: ");

        lotPriceInfo.setText("Lot Price:");

        lotStatusInfo.setText("Lot Status: ");

        SaleStartDateInfo.setText("Sale Start Date: ");

        lotBuyerInfo.setText("Lot Buyer: ");

        lotPurchaseDateInfo.setText("Purchase Date: ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lotReservedInfo)
                    .addComponent(lotNumberInfo)
                    .addComponent(blockNumberInfo)
                    .addComponent(lotSizeInfo)
                    .addComponent(lotPriceInfo)
                    .addComponent(lotStatusInfo)
                    .addComponent(SaleStartDateInfo)
                    .addComponent(lotBuyerInfo)
                    .addComponent(lotPurchaseDateInfo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lotNumberInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockNumberInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotSizeInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotPriceInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotStatusInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaleStartDateInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotBuyerInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotPurchaseDateInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotReservedInfo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        resultCountLabel.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        resultCountLabel.setText("0 results found.");

        javax.swing.GroupLayout LotInfoPanelLayout = new javax.swing.GroupLayout(LotInfoPanel);
        LotInfoPanel.setLayout(LotInfoPanelLayout);
        LotInfoPanelLayout.setHorizontalGroup(
            LotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LotInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(resultCountLabel))
                .addGap(50, 50, 50))
        );
        LotInfoPanelLayout.setVerticalGroup(
            LotInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LotInfoPanelLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addComponent(resultCountLabel)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(MainManagementPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ManagementTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LotInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(ManagementTablePane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LotInfoPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
            .addComponent(MainManagementPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Management", jPanel4);

        ReportPanel.setBackground(new java.awt.Color(182, 221, 251));

        jScrollPane1.setBackground(new java.awt.Color(182, 221, 251));

        ReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lot Number", "Block Number", "Lot Size", "Lot Price", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ReportTable);

        jPanel2.setBackground(new java.awt.Color(38, 153, 243));

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel10.setText("Report");

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel11.setText("Statistics");

        jPanel5.setBackground(new java.awt.Color(6, 42, 90));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel6.setBackground(new java.awt.Color(110, 187, 247));
        jPanel6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel6.setMaximumSize(new java.awt.Dimension(198, 169));
        jPanel6.setMinimumSize(new java.awt.Dimension(198, 169));

        numBlocks.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        numBlocks.setText("Number of Blocks : ");

        numTotalLots.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        numTotalLots.setText("Number of Total Lots : ");

        block1Lots.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        block1Lots.setText("Block 1: ");

        block2Lots.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        block2Lots.setText("Block 2: ");

        block3Lots.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        block3Lots.setText("Block 3: ");

        block4Lots.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        block4Lots.setText("Block 4: ");

        block5Lots.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        block5Lots.setText("Block 5: ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numBlocks)
                    .addComponent(numTotalLots)
                    .addComponent(block1Lots)
                    .addComponent(block2Lots)
                    .addComponent(block3Lots)
                    .addComponent(block4Lots)
                    .addComponent(block5Lots))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numBlocks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numTotalLots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block1Lots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block2Lots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block3Lots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block4Lots)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(block5Lots)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(110, 187, 247));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMaximumSize(new java.awt.Dimension(116, 127));
        jPanel1.setMinimumSize(new java.awt.Dimension(116, 127));

        lotsSoldLabel.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lotsSoldLabel.setText("Lots Sold:");

        lotsForSaleLabel.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lotsForSaleLabel.setText("Lots For Sale:");

        lotsReservedLabel.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lotsReservedLabel.setText("Lots Reserved:");

        aveLotSizeLabel.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        aveLotSizeLabel.setText("Average Lot Size:");

        aveLotPriceLabel.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        aveLotPriceLabel.setText("Average Lot Price:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lotsSoldLabel)
                    .addComponent(lotsForSaleLabel)
                    .addComponent(lotsReservedLabel)
                    .addComponent(aveLotSizeLabel)
                    .addComponent(aveLotPriceLabel))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(aveLotPriceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aveLotSizeLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotsReservedLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotsForSaleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lotsSoldLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel10)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(numBlocksReport)
                .addGap(35, 35, 35)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(numBlocksReport))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 56, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout ReportPanelLayout = new javax.swing.GroupLayout(ReportPanel);
        ReportPanel.setLayout(ReportPanelLayout);
        ReportPanelLayout.setHorizontalGroup(
            ReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReportPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ReportPanelLayout.setVerticalGroup(
            ReportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Report", ReportPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1084, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



private Status openStatusSpecificDialog(Status lotStatus) {
    JDialog statusDialog = new JDialog((Frame) null, "Enter Additional Information", true);
    statusDialog.setSize(400, 200);
    statusDialog.setLayout(new GridLayout(3, 2));


    if (lotStatus.toString().equals("For Sale")) {
        JLabel startSaleDateLabel = new JLabel("Start Sale Date: (yyyy-MM-dd)");
        JTextField startSaleDateField = new JTextField();
        statusDialog.add(startSaleDateLabel);
        statusDialog.add(startSaleDateField);

        JButton submitButton = new JButton("Submit");
        statusDialog.add(submitButton);

        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    Date startSaleDate = new SimpleDateFormat("yyyy-MM-dd").parse(startSaleDateField.getText());
                    if(!isDateValid(startSaleDateField.getText()))
                        throw new Exception();
                    ((StatusForSale) lotStatus).setStartSaleDate(startSaleDate);
                    statusDialog.dispose();
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    contFlag = false;
                    return;
                } catch (Exception e){
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    contFlag = false;
                }
                contFlag = true; 
            }
            
        });

    } else if (lotStatus.toString().equals("Reserved")) {
        JLabel reserveeNameLabel = new JLabel("Reservee Name:");
        JTextField reserveeNameField = new JTextField();
        JLabel reserveDateLabel = new JLabel("Reserve Date: (yyyy-MM-dd)");
        JTextField reserveDateField = new JTextField();

        statusDialog.add(reserveeNameLabel);
        statusDialog.add(reserveeNameField);
        statusDialog.add(reserveDateLabel);
        statusDialog.add(reserveDateField);

        JButton submitButton = new JButton("Submit");
        statusDialog.add(submitButton);

        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    String reserveeName = reserveeNameField.getText();
                    Date reserveDate = new SimpleDateFormat("yyyy-MM-dd").parse(reserveDateField.getText());
                    if(!isDateValid(reserveDateField.getText()))
                        throw new Exception();
                    ((StatusReserved) lotStatus).setReserveeName(reserveeName);
                    ((StatusReserved) lotStatus).setReserveDate(reserveDate);
                    
                    statusDialog.dispose();
                } catch (ParseException e) {
                    contFlag = false; 
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    return;
                } catch (Exception e){
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    contFlag = false;
                }
                contFlag = true;
            }
        });

    } else if (lotStatus.toString().equals("Purchased")) {
        JLabel purchaserNameLabel = new JLabel("Purchaser Name:");
        JTextField purchaserNameField = new JTextField();
        JLabel purchaseDateLabel = new JLabel("Purchase Date: (yyyy-MM-dd)");
        JTextField purchaseDateField = new JTextField();

        statusDialog.add(purchaserNameLabel);
        statusDialog.add(purchaserNameField);
        statusDialog.add(purchaseDateLabel);
        statusDialog.add(purchaseDateField);

        JButton submitButton = new JButton("Submit");
        statusDialog.add(submitButton);

        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    String purchaserName = purchaserNameField.getText();
                    Date purchaseDate = new SimpleDateFormat("yyyy-MM-dd").parse(purchaseDateField.getText());
                    if(!isDateValid(purchaseDateField.getText()))
                        throw new Exception();
                     ((StatusPurchased)lotStatus).setPurchaserName(purchaserName);
                    ((StatusPurchased)lotStatus).setPurchaseDate(purchaseDate);
                    statusDialog.dispose();
                } catch (ParseException e) {
                    contFlag = false;
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    return;
                } catch (Exception e){
                    JOptionPane.showMessageDialog(statusDialog, "Enter a valid date...", "Date Format Error", JOptionPane.ERROR_MESSAGE);
                    contFlag = false;
                }
                contFlag = true; 
            }
        });
        statusDialog.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Do not mark as completed, just close the dialog
                contFlag = false;
                statusDialog.dispose();
            }
        });
    }
    refreshTable();
    statusDialog.setVisible(true);
    return lotStatus;
}

public String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }

        return null;
}
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Save();
    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //load lots from file
        System.out.println("MainFrame --- Loading");
        try{
            //Lot transfer to corresponding blocks + update hashset            
            blocks = blocksData.LoadBlockData();
        } catch(IOException ioe){
            JOptionPane.showMessageDialog(rootPane, ioe);
        } catch(ClassNotFoundException cnfe){
            //JOptionPane.showMessageDialog(rootPane, cnfe);
        }
        //customInitComponents();
        refreshTable();
    }//GEN-LAST:event_formWindowOpened

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        List<Lot> lots = new ArrayList<>();
        for (Block block : blocks) {
            for (Lot lot : block.getLots()) {
                lots.add(lot);
            }
        }

        Search search = new LotSearch();

        //size
        if (!minSizeField.getText().isEmpty() && !maxSizeField.getText().isEmpty()) {
            double minSize = Double.parseDouble(minSizeField.getText());
            double maxSize = Double.parseDouble(maxSizeField.getText());
            search = new SizeFilter(search, minSize, maxSize);
        } else if (!minSizeField.getText().isEmpty()){
            double minSize = Double.parseDouble(minSizeField.getText());
            double maxSize = 1000000000;
            search = new SizeFilter(search, minSize, maxSize);
        } else if (!maxSizeField.getText().isEmpty()){
            double minSize = 0;
            double maxSize = Double.parseDouble(maxSizeField.getText());
            search = new SizeFilter(search, minSize, maxSize);
        }

        //blockNum
        if (!blockNumFieldSearch.getSelectedItem().equals("None")) {
            String blockNumber = (String) blockNumFieldSearch.getSelectedItem();
            search = new BlockFilter(search, blockNumber);
        }

        //price
        if (!minPriceField.getText().isEmpty() && !maxPriceField.getText().isEmpty()) {
            double minPrice = Double.parseDouble(minPriceField.getText());
            double maxPrice = Double.parseDouble(maxPriceField.getText());
            search = new PriceFilter(search, minPrice, maxPrice);
        } else if (!minPriceField.getText().isEmpty()){
            double minPrice = Double.parseDouble(minPriceField.getText());
            double maxPrice = 1000000000;
            search = new SizeFilter(search, minPrice, maxPrice);
        } else if (!maxPriceField.getText().isEmpty()){
            double minPrice = 0;
            double maxPrice = Double.parseDouble(maxPriceField.getText());
            search = new SizeFilter(search, minPrice, maxPrice);
        }
        
        if (!lotnumBox.getText().isEmpty()){
            int lotNumber = Integer.parseInt(lotnumBox.getText());
            search = new LotNumFilter(search, lotNumber);
        }

        //status
        String selectedButton = getSelectedButtonText(statusSearchGroup);
        if (selectedButton != null) {
            search = new StatusFilter(search, selectedButton);
        }
        
        //store
        List<Lot> filteredlotsList = search.search(lots);

        //fill
        DefaultTableModel tableModel = (DefaultTableModel) LotTable.getModel();
        tableModel.setRowCount(0);
        for (Lot lot : filteredlotsList) {
            Object[] rowData = {
                lot.getLotNumber(),
                lot.getBlock(),
                lot.getLotSize(),
                lot.getLotPrice(),
                lot.getLotStatus()
            };
            tableModel.addRow(rowData);
        }
        resultCountLabel.setText(filteredlotsList.size() + " results found.");
        resultCountLabel.setVisible(true);
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void tableRefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableRefreshButtonActionPerformed
        refreshTable();
    }//GEN-LAST:event_tableRefreshButtonActionPerformed

    private void DeleteLotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteLotButtonActionPerformed

        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(null, "Please select a lot to delete.");
            return;
        }
        int lotNumber = (int) LotTable.getValueAt(lotRow, 0);
        Block blockNumber = (Block) LotTable.getValueAt(lotRow, 1);

        System.out.println("Block Number: " + blockNumber);
        System.out.println("LotNumber: " + lotNumber);

        int response = JOptionPane.showOptionDialog(
            null,
            "Are you sure you want to delete this lot?",
            "Delete Confirmation",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            null,
            null
        );

        if (response == JOptionPane.NO_OPTION) {
            return;
        }

        ArrayList<Lot> lots = blockNumber.getLots();
        for(int i = 0; i < blocks.length; i++){
            for (int j = 0; j < blocks[i].getLots().size(); j++) {
                Lot lot = blocks[i].getLots().get(j);
                if (lot.getLotNumber() == lotNumber) {
                        lot.getBlock().deleteLot(lot);
                }
            }
        }
        for (int i=0; i<lots.size(); i++) {
            if (lots.get(i).getLotNumber() == lotNumber) {
                lots.get(i).getBlock().deleteLot(lots.get(i));
            }
        }

        DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
        model.removeRow(lotRow);
        refreshTable();
    }//GEN-LAST:event_DeleteLotButtonActionPerformed

    private void EditLotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditLotButtonActionPerformed

        Object[] rowData = new Object[LotTable.getColumnCount()];
        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(null, "Please select a lot to edit.");
            return;
        }
        for (int i=0; i<LotTable.getColumnCount(); i++) {
            rowData[i] = LotTable.getValueAt(lotRow, i);
        }
        JFrame editLotFrame = new JFrame("Edit Lot");
        editLotFrame.setSize(500, 300);
        editLotFrame.setLayout(new GridLayout(6, 2));

        // Labels
        JLabel lotNumberLabel = new JLabel("Lot Number:");
        JLabel blockNumberLabel = new JLabel("Block Number:");
        JLabel lotSizeLabel = new JLabel("Lot Size:");
        JLabel lotPriceLabel = new JLabel("Lot Price:");
        JLabel lotStatusLabel = new JLabel("Lot Status:");

        // Text fields
        JTextField lotNumberField = new JTextField(rowData[0].toString());
        JTextField lotSizeField = new JTextField(rowData[2].toString());
        JTextField lotPriceField = new JTextField(rowData[3].toString());

        JComboBox<String> blockNumberField = new JComboBox<>(blockList);
        blockNumberField.setSelectedItem(rowData[1]);

        String[] statusChoices = {"For Sale", "Reserved", "Sold"};
        JComboBox<String> lotStatusField = new JComboBox<String>(statusChoices);
        lotStatusField.setSelectedItem(rowData[4]);

        // Add components to frame
        editLotFrame.add(lotNumberLabel);
        editLotFrame.add(lotNumberField);
        editLotFrame.add(blockNumberLabel);
        editLotFrame.add(blockNumberField);
        editLotFrame.add(lotSizeLabel);
        editLotFrame.add(lotSizeField);
        editLotFrame.add(lotPriceLabel);
        editLotFrame.add(lotPriceField);
        editLotFrame.add(lotStatusLabel);
        editLotFrame.add(lotStatusField);

        JButton submitButton = new JButton("Submit");
        editLotFrame.add(submitButton);

        // Action listener for submit button
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Retrieve input values
                int lotNumber = Integer.parseInt(lotNumberField.getText());
                Block blockNum = getBlock(blockNumberField.getSelectedIndex());
                String lotSize = lotSizeField.getText();
                String lotPrice = lotPriceField.getText();
                int lotStatus = lotStatusField.getSelectedIndex();

                try {
                    double parsedLotSize = Double.parseDouble(lotSize);
                    double parsedLotPrice = Double.parseDouble(lotPrice);
                    Status parsedLotStatus = statusFactory.createStatus(lotStatus);
                    
                    for(int i = 0; i < blocks.length; i++){
                        for (int j = 0; j < blocks[i].getLots().size(); j++) {
                            Lot lot = blocks[i].getLots().get(j);
                            if (lot.getLotNumber() == (int)rowData[0]) {
                                if (allLots.contains(lotNumber) && lot.getLotNumber() != lotNumber) {
                                    JOptionPane.showMessageDialog(editLotFrame, "Duplicate lot. Enter another lot number.");
                                    return;
                                } 

                                if(blocks[i].getBlockNum() != blockNum.getBlockNum()){
                                    if(blockNum.getLots().size() >= 20){
                                        JOptionPane.showMessageDialog(editLotFrame, "Block destination full, try deleting or choosing another one.");
                                        return;
                                    }
                                    blocks[i].deleteLot(lot);
                                    lot.setLotNumber(lotNumber);
                                    blockNum.assignLot(lot);
                                }
                                
                                if (lot.getLotNumber() == (int)rowData[0]) {
                                    lot.setBlockNum(blockNum);
                                    lot.setLotNumber(lotNumber);
                                    lot.setLotSize(parsedLotSize);
                                    lot.setLotPrice(parsedLotPrice);
                                    lot.setLotStatus(parsedLotStatus);
                                    parsedLotStatus = openStatusSpecificDialog(parsedLotStatus);

                                    lot.setLotStatus(parsedLotStatus);
                                }  

                            }
                        }
                    }

                    DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
                    model.setValueAt(lotNumber, lotRow, 0);
                    model.setValueAt(blockNum, lotRow, 1);
                    model.setValueAt(parsedLotSize, lotRow, 2);
                    model.setValueAt(parsedLotPrice, lotRow, 3);
                    model.setValueAt(parsedLotStatus, lotRow, 4);

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(editLotFrame, "Please enter valid numbers for Size and Price.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(editLotFrame, "Error: " + e , "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Close the frame after submission
                refreshTable();
                editLotFrame.dispose();
            }

        });

        editLotFrame.setVisible(true);
        updateDetailsOnSelection();
    }//GEN-LAST:event_EditLotButtonActionPerformed

    private void AddLotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddLotButtonActionPerformed
        //max limit check
        int totalLotCount = 0;
        for(Block block: blocks){
            totalLotCount += block.getLots().size();
        }
        
        if(totalLotCount >= 100){
            JOptionPane.showMessageDialog(rootPane, "All blocks are full, delete a lot to continue.");
            return;
        }
        
        JFrame addLotFrame = new JFrame("Add Lot");
        addLotFrame.setSize(500, 300);
        addLotFrame.setLayout(new GridLayout(6, 2));

        // Labels
        JLabel lotNumberLabel = new JLabel("Lot Number:");
        JLabel blockNumberLabel = new JLabel("Block Number:");
        JLabel lotSizeLabel = new JLabel("Lot Size:");
        JLabel lotPriceLabel = new JLabel("Lot Price:");
        JLabel lotStatusLabel = new JLabel("Lot Status:");

        // Text fields
        JTextField lotNumberField = new JTextField();
        JTextField lotSizeField = new JTextField();
        JTextField lotPriceField = new JTextField();

        JComboBox<String> blockNumberField = new JComboBox<>(blockList);

        String[] statusChoices = {"For Sale", "Reserved", "Sold"};
        JComboBox<String> lotStatusField = new JComboBox<String>(statusChoices);

        // Add components to frame
        addLotFrame.add(lotNumberLabel);
        addLotFrame.add(lotNumberField);
        addLotFrame.add(blockNumberLabel);
        addLotFrame.add(blockNumberField);
        addLotFrame.add(lotSizeLabel);
        addLotFrame.add(lotSizeField);
        addLotFrame.add(lotPriceLabel);
        addLotFrame.add(lotPriceField);
        addLotFrame.add(lotStatusLabel);
        addLotFrame.add(lotStatusField);

        JButton submitButton = new JButton("Submit");
        addLotFrame.add(submitButton);

        // Action listener for submit button
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Retrieve input values
                String lotNumber = lotNumberField.getText();
                Block block = getBlock(blockNumberField.getSelectedIndex());
                String lotSize = lotSizeField.getText();
                String lotPrice = lotPriceField.getText();
                int lotStatus = lotStatusField.getSelectedIndex();

                try {
                    int parsedLotNumber = Integer.parseInt(lotNumber);
                    double parsedLotSize = Double.parseDouble(lotSize);
                    double parsedLotPrice = Double.parseDouble(lotPrice);
                    Status parsedLotStatus = statusFactory.createStatus(lotStatus);

                    Lot lotObject = new Lot();
                    lotObject.setLotNumber(parsedLotNumber);
                    lotObject.setBlockNum(block);
                    lotObject.setLotSize(parsedLotSize);
                    lotObject.setLotPrice(parsedLotPrice);
                    lotObject.setLotStatus(parsedLotStatus);

                    if (!block.checkDuplicateLot(lotObject)) {
                        JOptionPane.showMessageDialog(addLotFrame, "Duplicate lot. Enter another lot number.");
                        return;
                    }
                    
                    //block limit of 20 lots
                    if(block.getLots().size() == 20){
                        JOptionPane.showMessageDialog(rootPane, "Block already full, choose another one.");
                        return;
                    }
                    
                    parsedLotStatus = openStatusSpecificDialog(parsedLotStatus);
                    lotObject.setLotStatus(parsedLotStatus);

                    if (!contFlag) {
                        return;
                    }

                    block.assignLot(lotObject);

                    Object[] rowData = {lotNumber, block, parsedLotSize, parsedLotPrice, parsedLotStatus};
                    DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
                    model.addRow(rowData);

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(addLotFrame, "Please enter valid numbers for Size and Price.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(addLotFrame, "Error: " + e , "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Close the frame after submission
                addLotFrame.dispose();
            }

        });

        addLotFrame.setVisible(true);
    }//GEN-LAST:event_AddLotButtonActionPerformed

    private void ForSaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ForSaleButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(null, "Please select a lot first.");
            return;
        }
        int lotNumber = (int) LotTable.getValueAt(lotRow, 0);
        Block blockNumber = (Block) LotTable.getValueAt(lotRow, 1);

        for (Lot lot : blockNumber.getLots()) {
            if (lotNumber == lot.getLotNumber()) {
                Status forSaleStatus = new StatusForSale();
                forSaleStatus = openStatusSpecificDialog(forSaleStatus);

                if (!contFlag) {
                    return;
                }

                lot.setLotStatus(forSaleStatus);
                model.setValueAt(forSaleStatus, lotRow, 4);
            }
        }

        updateDetailsOnSelection();
    }//GEN-LAST:event_ForSaleButtonActionPerformed

    private void SoldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SoldButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(null, "Please select a lot first.");
            return;
        }
        int lotNumber = (int) LotTable.getValueAt(lotRow, 0);
        Block blockNumber = (Block) LotTable.getValueAt(lotRow, 1);

        for (Lot lot : blockNumber.getLots()) {
            if (lotNumber == lot.getLotNumber()) {
                Status purchasedStatus = new StatusPurchased();
                purchasedStatus = openStatusSpecificDialog(purchasedStatus);

                if (!contFlag) {
                    return;
                }

                lot.setLotStatus(purchasedStatus);

                model.setValueAt(purchasedStatus, lotRow, 4);
            }
        }

        updateDetailsOnSelection();
    }//GEN-LAST:event_SoldButtonActionPerformed

    private void ReserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReserveButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) LotTable.getModel();
        int lotRow = LotTable.getSelectedRow();
        if (lotRow == -1) {
            // No row is selected
            JOptionPane.showMessageDialog(null, "Please select a lot first.");
            return;
        }
        int lotNumber = (int)LotTable.getValueAt(lotRow, 0);
        Block blockNumber = (Block) LotTable.getValueAt(lotRow, 1);

        for (Lot lot : blockNumber.getLots()) {
            if (lotNumber == lot.getLotNumber()) {
                try {
                    Status reservedStatus = new StatusReserved();
                    reservedStatus = openStatusSpecificDialog(reservedStatus);

                    if (!contFlag) {
                        return;
                    }

                    lot.setLotStatus(reservedStatus);

                    model.setValueAt(reservedStatus, lotRow, 4);

                }
                catch (Exception e) {
                    System.out.println("Error: " + e );
                }

            }
        }
        updateDetailsOnSelection();
    }//GEN-LAST:event_ReserveButtonActionPerformed

    private void LotTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LotTableMouseClicked
        updateDetailsOnSelection();
    }//GEN-LAST:event_LotTableMouseClicked
   
    // TO-DO: CONFIRMATION MESSAGE BEFORE DELETING
    private void tabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPaneStateChanged
        JTabbedPane pane = (JTabbedPane) evt.getSource();
            int selectedIndex = pane.getSelectedIndex();
            System.out.println("HASHSET: " + Block.allLots.size());
            
            if (selectedIndex == 1) {
                populateReportTable();
                populateReportStats();
            }   
    }//GEN-LAST:event_tabbedPaneStateChanged

    private void logoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseClicked
        logoutPanel.setBackground(new Color(199, 207, 218));
        logoutButton.setBackground(new Color(6, 42, 90));
        
        Save();
        //switch frames
        this.dispose();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginFrame().setVisible(true);
            }
        });
        //loginFrame.setVisible(true);
    }//GEN-LAST:event_logoutButtonMouseClicked

    private void logoutButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseEntered
        logoutPanel.setBackground(new Color(89, 113, 145));
        logoutButton.setBackground(new Color(6, 42, 90));
    }//GEN-LAST:event_logoutButtonMouseEntered

    private void logoutButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logoutButtonMouseExited
        logoutPanel.setBackground(new Color(6, 42, 90));
        logoutButton.setBackground(new Color(199, 207, 218));
    }//GEN-LAST:event_logoutButtonMouseExited

    private void tableResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableResetButtonActionPerformed
        minSizeField.setText("");
        maxSizeField.setText("");
        minPriceField.setText("");
        maxPriceField.setText("");
        blockNumFieldSearch.setSelectedIndex(0);
        lotnumBox.setText("");
        statusSearchGroup.clearSelection();
    }//GEN-LAST:event_tableResetButtonActionPerformed
   
        // Method to populate the report table
        private void populateReportTable() {
            
            DefaultTableModel reportTableModel = (DefaultTableModel) ReportTable.getModel();
            reportTableModel.setRowCount(0); // Clear existing rows

            for (Block block : blocks) {
                for (Lot lot : block.getLots()) {
                    Object[] rowData = {
                        lot.getLotNumber(),
                        lot.getBlock(),
                        lot.getLotSize(),
                        lot.getLotPrice(),
                        lot.getLotStatus()
                    };
                    reportTableModel.addRow(rowData);
                }
            }
        }

        private void populateReportStats() {
            numBlocks.setText("Number of Blocks: " + blockList.length);
            numTotalLots.setText("Number of Total Lots: " + Block.allLots.size());
            block1Lots.setText("Block 1: " + blocks[0].getLots().size());
            block2Lots.setText("Block 2: " + blocks[1].getLots().size());
            block3Lots.setText("Block 3: " + blocks[2].getLots().size());
            block4Lots.setText("Block 4: " + blocks[3].getLots().size());
            block5Lots.setText("Block 5: " + blocks[4].getLots().size());
            
            int[] statusCount = Report.StatusCount(blocks);
            aveLotPriceLabel.setText("Average Lot Price: " + Report.AveLotPrice(blocks));
            aveLotSizeLabel.setText("Average Lot Size: " + Report.AveLotSize(blocks));
            lotsReservedLabel.setText("Lots Reserved: " + statusCount[0]);
            lotsForSaleLabel.setText("Lots For Sale: " + statusCount[1]);
            lotsSoldLabel.setText("Lots Sold: " + statusCount[2]);
        }
                                       
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//
//        FlatLightLaf.setup();
//        
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MainFrame().setVisible(true);
//
//            }
//        });
//
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddLotButton;
    private javax.swing.JButton DeleteLotButton;
    private javax.swing.JButton EditLotButton;
    private javax.swing.JButton ForSaleButton;
    private javax.swing.JPanel LotInfoPanel;
    private javax.swing.JTable LotTable;
    private javax.swing.JPanel MainManagementPane;
    private javax.swing.JPanel ManagementTablePane;
    private javax.swing.JPanel ReportPanel;
    private javax.swing.JTable ReportTable;
    private javax.swing.JButton ReserveButton;
    private javax.swing.JLabel SaleStartDateInfo;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton SoldButton;
    private javax.swing.JLabel aveLotPriceLabel;
    private javax.swing.JLabel aveLotSizeLabel;
    private javax.swing.JLabel block1Lots;
    private javax.swing.JLabel block2Lots;
    private javax.swing.JLabel block3Lots;
    private javax.swing.JLabel block4Lots;
    private javax.swing.JLabel block5Lots;
    private javax.swing.JComboBox<String> blockNumFieldSearch;
    private javax.swing.JLabel blockNumberInfo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel logoutButton;
    private javax.swing.JPanel logoutPanel;
    private javax.swing.JLabel lotBuyerInfo;
    private javax.swing.JLabel lotNumberInfo;
    private javax.swing.JLabel lotPriceInfo;
    private javax.swing.JLabel lotPurchaseDateInfo;
    private javax.swing.JLabel lotReservedInfo;
    private javax.swing.JLabel lotSizeInfo;
    private javax.swing.JLabel lotStatusInfo;
    private javax.swing.JTextField lotnumBox;
    private javax.swing.JLabel lotsForSaleLabel;
    private javax.swing.JLabel lotsReservedLabel;
    private javax.swing.JLabel lotsSoldLabel;
    private javax.swing.JTextField maxPriceField;
    private javax.swing.JTextField maxSizeField;
    private javax.swing.JTextField minPriceField;
    private javax.swing.JTextField minSizeField;
    private javax.swing.JLabel numBlocks;
    private javax.swing.JLabel numBlocksReport;
    private javax.swing.JLabel numTotalLots;
    private javax.swing.JLabel resultCountLabel;
    private javax.swing.ButtonGroup statusSearchGroup;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton tableRefreshButton;
    private javax.swing.JButton tableResetButton;
    private javax.swing.JLabel userImg;
    private javax.swing.JLabel userLabel;
    // End of variables declaration//GEN-END:variables


    // USER-DEFINED
    public boolean isDateValid(String date){//no leapyears
        //yyyy-mm-dd
        boolean isValid = true;
        String[] split = date.split("-");
        int year = Integer.parseInt(split[0]);
        int month = Integer.parseInt(split[1]);
        int day = Integer.parseInt(split[2]);
        
        if(year < 1900 || year > 2024)
            isValid = false;
        if(month < 1 || month > 12)
            isValid = false;
        if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
            if(day < 1 || day > 31)
                isValid = false;
        if(month == 4 || month == 6 || month == 9 || month == 11)
            if(day < 1 || day > 30)
                isValid = false;
        if(month == 28)
            if(day < 1 || day > 28)
                isValid = false;
        return isValid;
    }
    public void refreshTable(){
        DefaultTableModel tableModel = (DefaultTableModel) LotTable.getModel();
        tableModel.setRowCount(0);
        for (Block block : blocks) {
            for (Lot lot : block.getLots()) {
                Object[] rowData = {
                    lot.getLotNumber(),
                    lot.getBlock(),
                    lot.getLotSize(),
                    lot.getLotPrice(),
                    lot.getLotStatus()
                };
                tableModel.addRow(rowData);
            }
        }
        populateReportTable();
        populateReportStats();
    }
    public Block getBlock(int comboIndex) {
        switch (comboIndex) {
            case 0: return blocks[0];
            case 1: return blocks[1];
            case 3: return blocks[2];
            case 4: return blocks[3];
            case 5: return blocks[4];
            default: throw new IllegalArgumentException("Invalid index");
        }
    }
  
    public void Save(){
        //save lots to file
        System.out.println("MainFrame --- Saving");
        try{
            blocksData.SaveData(blocks);
        } catch(IOException ioe){
            JOptionPane.showMessageDialog(rootPane, ioe);
        }
    }
    
    public double random(double min, double max){
        double range = max - min + 1;
        double rand = (Math.random() * range) + min;
        
        return rand;
    }
    
    public String randomMonth(){
        int month = (int)random(1, 12);
        String monthS;
        if (month < 10)
            monthS = "0" + month;
        else
            monthS = "" + month;
        return monthS;
    }
    
    public double round(double num){
        return ((int)Math.round(num * 10.0))/100.0;
    }
    
    public void blockGenerator(){
        String[] names = {"John Doe", "Jane Smith", "Alice Guo", "Michael Brown", "Emily Davis", "David Wilson", "Elon Musk", "Tim Cook"}; 
        int count = 1;
        for(int i = 0; i < blocks.length; i++){
            for(int j = 0; j < 20; j++){
                Lot lot = new Lot();
                lot.setBlockNum(blocks[i]);
                lot.setLotNumber(count);
                lot.setLotPrice(round(random(30000, 500000)));
                lot.setLotSize(round(random(100, 2000)));
                
                int num = (int)random(0, 2);
                switch(num){
                    case 0://sale
                        StatusForSale lotStatus1 = new StatusForSale();
                            
                        try {
                            lotStatus1.setStartSaleDate(new SimpleDateFormat("yyyy-MM-dd").parse((int)random(1990,2024)+"-"+randomMonth()+"-"+(int)random(1,28)));
                        } catch (ParseException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        lot.setLotStatus(lotStatus1);
                        break;
                        
                    case 1://reserved
                        StatusReserved lotStatus2 = new StatusReserved();
                        lotStatus2.setReserveeName(names[(int)random(0,7)]);
                        try {
                            lotStatus2.setReserveDate(new SimpleDateFormat("yyyy-MM-dd").parse((int)random(1990,2024)+"-"+randomMonth()+"-"+(int)random(1,28)));
                        } catch (ParseException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        lot.setLotStatus(lotStatus2);
                        break;
                        
                    case 2://purchase
                        StatusPurchased lotStatus3 = new StatusPurchased();
                        lotStatus3.setPurchaserName(names[(int)random(0,7)]);
                        try {
                            lotStatus3.setPurchaseDate(new SimpleDateFormat("yyyy-MM-dd").parse((int)random(1990,2024)+"-"+randomMonth()+"-"+(int)random(1,28)));
                        } catch (ParseException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        lot.setLotStatus(lotStatus3);
                        break;
                        
                    default:
                        break;
                }
                blocks[i].assignLot(lot);
                count += 1;
            }
        }
    }
    
    // info not working yet
    private void customInitComponents() {
        LotTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateDetailsOnSelection();
            }
    });
        
        blockGenerator();

        DefaultTableModel tableModel = (DefaultTableModel) LotTable.getModel();


        for (int i = 0; i < blocks.length; i++) {
                for (Lot lot : blocks[i].getLots()) {

                    Object[] rowData = {
                            lot.getLotNumber(),
                            lot.getBlock(),
                            lot.getLotSize(),
                            lot.getLotPrice(),
                            lot.getLotStatus()
                        };
                    tableModel.addRow(rowData);
                }
            }
        System.out.println(Block.allLots);
    }

    // Method to update details on selection
    private void updateDetailsOnSelection() {

        int selectedRow = LotTable.getSelectedRow();
        if (selectedRow != -1) {
            // Get the values from the selected row
            int lotNumber = (int)LotTable.getValueAt(selectedRow, 0);
            Block block = (Block) LotTable.getValueAt(selectedRow, 1);
            double lotSize = (Double) LotTable.getValueAt(selectedRow, 2);
            double lotPrice = (Double) LotTable.getValueAt(selectedRow, 3);

            for (Lot lot : block.getLots()) {
                if (lot.getLotNumber() == lotNumber) {
                    Status lotLocalStatus = lot.getLotStatus();
                    if (lotLocalStatus.toString().equals("For Sale")) {
                        lotReservedInfo.setText("Lot Reservee: ");
                        lotPurchaseDateInfo.setText("Purchase Date: ");
                        lotBuyerInfo.setText("Lot Buyer: ");
                        StatusForSale forSaleStatus = (StatusForSale) lotLocalStatus;
                        lotStatusInfo.setText("Lot Status: " + forSaleStatus.toString());
                        SaleStartDateInfo.setText("Sale Start Date: " + forSaleStatus.formatDate());
                    } else if (lotLocalStatus.toString().equals("Reserved")) {
                        SaleStartDateInfo.setText("Sale Start Date: ");
                        lotPurchaseDateInfo.setText("Purchase Date: ");
                        lotBuyerInfo.setText("Lot Buyer: ");

                        StatusReserved reservedStatus = (StatusReserved) lotLocalStatus;
                        lotStatusInfo.setText("Lot Status: " + reservedStatus.toString());
                        lotReservedInfo.setText("Lot Reservee: " + reservedStatus.getReserveeName());
                    } else {
                        SaleStartDateInfo.setText("Sale Start Date: ");
                        lotReservedInfo.setText("Lot Reservee: ");
                        StatusPurchased purchasedStatus = (StatusPurchased) lotLocalStatus;
                        lotStatusInfo.setText("Lot Status: " + purchasedStatus.toString());
                        lotPurchaseDateInfo.setText("Purchase Date: " + purchasedStatus.formatDate());
                        lotBuyerInfo.setText("Lot Buyer: " + purchasedStatus.getPurchaserName());
                    }
                }
            }



            // Update the text fields with the selected row values
            lotNumberInfo.setText("Lot Number: " + lotNumber);
            blockNumberInfo.setText("Block Number: " + block); // Convert block to string representation
            lotSizeInfo.setText("Lot Size: " + String.valueOf(lotSize));
            lotPriceInfo.setText("Lot Price: " + String.valueOf(lotPrice));
        }
    }
}

